{"ast":null,"code":"function addCommas(numbers) {\n  if (!numbers) return;\n  const numbersArray = numbers.toString();\n\n  if (numbersArray.indexOf(\"-\") !== -1) {\n    numbersArray.slice(1);\n  }\n\n  const [number, decimal] = numbersArray.split(\".\");\n  const reversedArray = number.split(\"\").reverse();\n  const addedCommas = [];\n\n  for (let i = 0; i < reversedArray.length; i++) {\n    if (i % 3 === 0 && i !== 0) {\n      addedCommas.push(\",\");\n    }\n\n    addedCommas.push(reversedArray[i]);\n  }\n\n  addedCommas.reverse();\n\n  if (decimal) {\n    addedCommas.push(\".\");\n    addedCommas.push(decimal);\n  }\n\n  return addedCommas.join(\"\");\n}\n\nfunction abreviateLargeNums(num) {\n  const numString = num.toString(); //trillion\n\n  if (numString.length >= 13) {\n    const dec = (num / 1000000000000).toFixed(3);\n    return `${dec} T`;\n  } //billions\n\n\n  if (numString.length >= 10) {\n    const dec = (num / 1000000000).toFixed(3);\n    return `${dec} B`;\n  } //millions\n\n\n  if (numString.length >= 7) {\n    const dec = (num / 1000000).toFixed(3);\n    return `${dec} M`;\n  } else return `${addCommas(num)}`;\n}\n\nmodule.exports = {\n  abreviateLargeNums,\n  addCommas\n};","map":{"version":3,"sources":["/Users/clarksmith/Desktop/Programming/capstone2/react-test-marketupdate/src/helpers/abreviateLargeNums.js"],"names":["addCommas","numbers","numbersArray","toString","indexOf","slice","number","decimal","split","reversedArray","reverse","addedCommas","i","length","push","join","abreviateLargeNums","num","numString","dec","toFixed","module","exports"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,MAAI,CAACA,OAAL,EAAc;AACd,QAAMC,YAAY,GAAGD,OAAO,CAACE,QAAR,EAArB;;AACA,MAAID,YAAY,CAACE,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAAnC,EAAsC;AACpCF,IAAAA,YAAY,CAACG,KAAb,CAAmB,CAAnB;AACD;;AAED,QAAM,CAACC,MAAD,EAASC,OAAT,IAAoBL,YAAY,CAACM,KAAb,CAAmB,GAAnB,CAA1B;AAEA,QAAMC,aAAa,GAAGH,MAAM,CAACE,KAAP,CAAa,EAAb,EAAiBE,OAAjB,EAAtB;AACA,QAAMC,WAAW,GAAG,EAApB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAAa,CAACI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAIA,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeA,CAAC,KAAK,CAAzB,EAA4B;AAC1BD,MAAAA,WAAW,CAACG,IAAZ,CAAiB,GAAjB;AACD;;AACDH,IAAAA,WAAW,CAACG,IAAZ,CAAiBL,aAAa,CAACG,CAAD,CAA9B;AACD;;AAEDD,EAAAA,WAAW,CAACD,OAAZ;;AAEA,MAAIH,OAAJ,EAAa;AACXI,IAAAA,WAAW,CAACG,IAAZ,CAAiB,GAAjB;AACAH,IAAAA,WAAW,CAACG,IAAZ,CAAiBP,OAAjB;AACD;;AACD,SAAOI,WAAW,CAACI,IAAZ,CAAiB,EAAjB,CAAP;AACD;;AAED,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,QAAMC,SAAS,GAAGD,GAAG,CAACd,QAAJ,EAAlB,CAD+B,CAE/B;;AACA,MAAIe,SAAS,CAACL,MAAV,IAAoB,EAAxB,EAA4B;AAC1B,UAAMM,GAAG,GAAG,CAACF,GAAG,GAAG,aAAP,EAAsBG,OAAtB,CAA8B,CAA9B,CAAZ;AAEA,WAAQ,GAAED,GAAI,IAAd;AACD,GAP8B,CAS/B;;;AACA,MAAID,SAAS,CAACL,MAAV,IAAoB,EAAxB,EAA4B;AAC1B,UAAMM,GAAG,GAAG,CAACF,GAAG,GAAG,UAAP,EAAmBG,OAAnB,CAA2B,CAA3B,CAAZ;AAEA,WAAQ,GAAED,GAAI,IAAd;AACD,GAd8B,CAgB/B;;;AACA,MAAID,SAAS,CAACL,MAAV,IAAoB,CAAxB,EAA2B;AACzB,UAAMM,GAAG,GAAG,CAACF,GAAG,GAAG,OAAP,EAAgBG,OAAhB,CAAwB,CAAxB,CAAZ;AAEA,WAAQ,GAAED,GAAI,IAAd;AACD,GAJD,MAIO,OAAQ,GAAEnB,SAAS,CAACiB,GAAD,CAAM,EAAzB;AACR;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AAAEN,EAAAA,kBAAF;AAAsBhB,EAAAA;AAAtB,CAAjB","sourcesContent":["function addCommas(numbers) {\n  if (!numbers) return;\n  const numbersArray = numbers.toString();\n  if (numbersArray.indexOf(\"-\") !== -1) {\n    numbersArray.slice(1);\n  }\n\n  const [number, decimal] = numbersArray.split(\".\");\n\n  const reversedArray = number.split(\"\").reverse();\n  const addedCommas = [];\n\n  for (let i = 0; i < reversedArray.length; i++) {\n    if (i % 3 === 0 && i !== 0) {\n      addedCommas.push(\",\");\n    }\n    addedCommas.push(reversedArray[i]);\n  }\n\n  addedCommas.reverse();\n\n  if (decimal) {\n    addedCommas.push(\".\");\n    addedCommas.push(decimal);\n  }\n  return addedCommas.join(\"\");\n}\n\nfunction abreviateLargeNums(num) {\n  const numString = num.toString();\n  //trillion\n  if (numString.length >= 13) {\n    const dec = (num / 1000000000000).toFixed(3);\n\n    return `${dec} T`;\n  }\n\n  //billions\n  if (numString.length >= 10) {\n    const dec = (num / 1000000000).toFixed(3);\n\n    return `${dec} B`;\n  }\n\n  //millions\n  if (numString.length >= 7) {\n    const dec = (num / 1000000).toFixed(3);\n\n    return `${dec} M`;\n  } else return `${addCommas(num)}`;\n}\n\nmodule.exports = { abreviateLargeNums, addCommas };\n"]},"metadata":{},"sourceType":"module"}