{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass MarketUpdateApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${MarketUpdateApi.token}`\n    };\n\n    try {\n      const res = (await axios({\n        url,\n        method,\n        data,\n        headers\n      })).data;\n      console.log(res);\n      return res; // return (await axios({ url, method, data, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n\n  static async addTickerToWatchlist(username, ticker) {\n    let res = await this.request(`users/${username}/watchlist/${ticker}`, {}, \"post\");\n    return res;\n  }\n\n  static async removeFromWatchlist(username, ticker) {\n    let res = await this.request(`users/${username}/watchlist/${ticker}`, {}, \"delete\");\n    return res;\n  }\n\n  static async getToken(username, password) {\n    let res = await this.request(`auth/token`, {\n      username,\n      password\n    }, \"post\"); // let res = await axios.post(\"http://localhost:3001/auth/token\", {\n    //   username,\n    //   password,\n    // });\n\n    console.log(\"TOKEN RES\", res);\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async registerUser(formData) {\n    let res = await this.request(`auth/register`, { ...formData\n    }, \"post\");\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async getCurrentUserData(username) {\n    let res = await this.request(`users/${username}`);\n    console.log(\"RESCURR\", res);\n    return res.user;\n  }\n\n  static async clearToken() {\n    MarketUpdateApi.token = \"\";\n  }\n\n  static async apply(username, id) {\n    const res = await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n    return res;\n  }\n\n  static async updateProfile(formData) {\n    // check if pasword matches, if not throws error\n    await this.getToken(formData.username, formData.password);\n    const res = await this.request(`users/${formData.username}`, {\n      password: formData.password,\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email\n    }, \"patch\");\n    return res;\n  }\n\n}\n\nexport default MarketUpdateApi;","map":{"version":3,"sources":["/Users/clarksmith/Desktop/Programming/capstone2/react-test-marketupdate/src/api/MarketUpdateApi.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","MarketUpdateApi","request","endpoint","data","method","url","headers","Authorization","token","res","console","log","err","error","response","message","Array","isArray","addTickerToWatchlist","username","ticker","removeFromWatchlist","getToken","password","registerUser","formData","getCurrentUserData","user","clearToken","apply","id","updateProfile","firstName","lastName","email"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass MarketUpdateApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${MarketUpdateApi.token}` };\n\n    try {\n      const res = (await axios({ url, method, data, headers })).data;\n      console.log(res);\n      return res;\n      // return (await axios({ url, method, data, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  static async addTickerToWatchlist(username, ticker) {\n    let res = await this.request(\n      `users/${username}/watchlist/${ticker}`,\n      {},\n      \"post\"\n    );\n    return res;\n  }\n  static async removeFromWatchlist(username, ticker) {\n    let res = await this.request(\n      `users/${username}/watchlist/${ticker}`,\n      {},\n      \"delete\"\n    );\n    return res;\n  }\n\n  static async getToken(username, password) {\n    let res = await this.request(`auth/token`, { username, password }, \"post\");\n    // let res = await axios.post(\"http://localhost:3001/auth/token\", {\n    //   username,\n    //   password,\n    // });\n    console.log(\"TOKEN RES\", res);\n    MarketUpdateApi.token = res.token;\n\n    return res.token;\n  }\n\n  static async registerUser(formData) {\n    let res = await this.request(`auth/register`, { ...formData }, \"post\");\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async getCurrentUserData(username) {\n    let res = await this.request(`users/${username}`);\n    console.log(\"RESCURR\", res);\n    return res.user;\n  }\n  static async clearToken() {\n    MarketUpdateApi.token = \"\";\n  }\n\n  static async apply(username, id) {\n    const res = await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n    return res;\n  }\n\n  static async updateProfile(formData) {\n    // check if pasword matches, if not throws error\n    await this.getToken(formData.username, formData.password);\n\n    const res = await this.request(\n      `users/${formData.username}`,\n      {\n        password: formData.password,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n      },\n      \"patch\"\n    );\n    return res;\n  }\n}\n\nexport default MarketUpdateApi;\n"]},"metadata":{},"sourceType":"module"}