{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass MarketUpdateApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${MarketUpdateApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get details on a company by handle. */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async addTickerToWatchlist(username, ticker) {\n    let res = await this.request(`users/${username}/watchlist/${ticker}`, {}, \"post\");\n    return res;\n  }\n\n  static async removeFromWatchlist(username, ticker) {\n    let res = await this.request(`users/${username}/watchlist/${ticker}`, {}, \"delete\");\n    return res;\n  }\n\n  static async getJob(handle) {\n    let res = await this.request(`jobs/${handle}`);\n    return res.job;\n  }\n\n  static async getCompaniesJobs(companyHandle) {\n    let res = await this.request(`companies/${companyHandle}`);\n    return res;\n  }\n\n  static async getAllCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  static async searchCompanyByName(searchVal) {\n    let res = await this.request(`companies?name=${searchVal}`);\n    return res.companies;\n  }\n\n  static async getAllJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  static async searchJobByTitle(searchVal) {\n    let res = await this.request(`jobs?title=${searchVal}`);\n    return res.jobs;\n  }\n\n  static async getToken(username, password) {\n    let res = await this.request(`auth/token`, {\n      username,\n      password\n    }, \"post\");\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async registerUser(formData) {\n    let res = await this.request(`auth/register`, { ...formData\n    }, \"post\");\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async getCurrentUserData(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async clearToken() {\n    MarketUpdateApi.token = \"\";\n  }\n\n  static async apply(username, id) {\n    const res = await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n    return res;\n  }\n\n  static async updateProfile(formData) {\n    // check if pasword matches, if not throws error\n    await this.getToken(formData.username, formData.password);\n    const res = await this.request(`users/${formData.username}`, {\n      password: formData.password,\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email\n    }, \"patch\");\n    return res;\n  }\n\n}\n\nexport default MarketUpdateApi;","map":{"version":3,"sources":["/Users/clarksmith/Desktop/Programming/capstone2/react-test-marketupdate/src/api/MarketUpdateApi.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","MarketUpdateApi","request","endpoint","data","method","url","headers","Authorization","token","params","err","console","error","response","message","Array","isArray","getCompany","handle","res","company","addTickerToWatchlist","username","ticker","removeFromWatchlist","getJob","job","getCompaniesJobs","companyHandle","getAllCompanies","companies","searchCompanyByName","searchVal","getAllJobs","jobs","searchJobByTitle","getToken","password","registerUser","formData","getCurrentUserData","user","clearToken","apply","id","updateProfile","firstName","lastName","email"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass MarketUpdateApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${MarketUpdateApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async addTickerToWatchlist(username, ticker) {\n    let res = await this.request(\n      `users/${username}/watchlist/${ticker}`,\n      {},\n      \"post\"\n    );\n    return res;\n  }\n  static async removeFromWatchlist(username, ticker) {\n    let res = await this.request(\n      `users/${username}/watchlist/${ticker}`,\n      {},\n      \"delete\"\n    );\n    return res;\n  }\n\n  static async getJob(handle) {\n    let res = await this.request(`jobs/${handle}`);\n    return res.job;\n  }\n\n  static async getCompaniesJobs(companyHandle) {\n    let res = await this.request(`companies/${companyHandle}`);\n    return res;\n  }\n  static async getAllCompanies() {\n    let res = await this.request(\"companies\");\n\n    return res.companies;\n  }\n  static async searchCompanyByName(searchVal) {\n    let res = await this.request(`companies?name=${searchVal}`);\n    return res.companies;\n  }\n\n  static async getAllJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  static async searchJobByTitle(searchVal) {\n    let res = await this.request(`jobs?title=${searchVal}`);\n    return res.jobs;\n  }\n\n  static async getToken(username, password) {\n    let res = await this.request(`auth/token`, { username, password }, \"post\");\n\n    MarketUpdateApi.token = res.token;\n\n    return res.token;\n  }\n\n  static async registerUser(formData) {\n    let res = await this.request(`auth/register`, { ...formData }, \"post\");\n    MarketUpdateApi.token = res.token;\n    return res.token;\n  }\n\n  static async getCurrentUserData(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n  static async clearToken() {\n    MarketUpdateApi.token = \"\";\n  }\n\n  static async apply(username, id) {\n    const res = await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n    return res;\n  }\n\n  static async updateProfile(formData) {\n    // check if pasword matches, if not throws error\n    await this.getToken(formData.username, formData.password);\n\n    const res = await this.request(\n      `users/${formData.username}`,\n      {\n        password: formData.password,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n      },\n      \"patch\"\n    );\n    return res;\n  }\n}\n\nexport default MarketUpdateApi;\n"]},"metadata":{},"sourceType":"module"}